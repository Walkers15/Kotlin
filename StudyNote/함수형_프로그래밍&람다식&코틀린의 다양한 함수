함수형 프로그래밍의 정의와 특징
  - 순수 함수를 사용해야 한다
  - 람다식을 사용할 수 있다
  - 고차 함수를 사용할 수 있다

고차 함수 - 다른 함수를 인자로 사용하거나 함수를 결과값으로 반환하는 함수

람다식 - 일급 객체의 특징을 가진 이름이 없는 "함수"

람다식이 할당된 변수(val multi[생략가능(Int,Int) -> Int] = {x: Int, y: Int -> x*y} 등)은 함수처럼 사용할 수 있음!
val multi: (Int, Int) -> Int = {x: Int, y: Int -> x*y}
val multi = {x:Int, y:Int -> x*y}
val multi: (Int, Int) -> Int = {x,y -> x*y} >> 셋 다 똑같은 의미임! 다 생략하면 추론이 불가능하므로 오류

반환 자료형이 없고, 매개변수가 없는 경우
val greet: () -> Unit = {println{"Hello World!")} 매개변수를 표현할 필요가 없으므로, 화살표 양쪽과 화살표 자체를 생략하여 표현
val greet = {println("Hello World!")} 로 생략하여 표현 가능

람다식의 값에 의한 호출
함수(람다식으로 표현한 이름 없는 함수)가 다른 함수의 인자로 전달될 경우, 람다식 함수는 값으로 처리되어 "그 즉시" 함수가 수행된 후 값을 반환함
val result = callbyValue(lambda())

이름에 의한 호출
람다식 함수(lambda()) 대신 람다식 이름(otherLambda)으로 호출하는 경우

다른 함수의 참조에 의한 일반 함수 호출
인자의 수와 자료형의 갯수가 동일하면, :: 기호를 이용해 소괄호와 인자를 생략하고 사용할 수 있음
fun sum (x:Int, y: Int) = x + y
fun funcParam(a: Int, b: Int, c: (Int,Int) -> Int): Int{
  return c(a,b)
}
funcParam(3,2,::sum)


예제2

fun hello(body: (String, String) -> String): Unit{
  println(body("Hello","World"))
}
fun text(a: String, b: String) = "Hi!, $a $b"
일때
hello(::text)
hello({a, b -> text(a,b)}
hello{a,b -> text(a,b)}
위 세 가지 표현 모두 동일한 결과를 출력함

람다식의 매개변수
매개변수 파일 참조

고차 함수와 람다식의 사용 예시
 - ReentrantLock을 통해 공유 자원에 접근하는 코드를 보호할 수 있음

fun <T> lock(reLock: ReentrantLock, body: ()->T): T{ //제네릭 함수
  reLock.lock()
  try{
    return body()
  } finally {
    relock.unlock()
  }
} - 

기타 여러가지 함수들\

익명 함수
일반 함수이지만 이름이 없는 함수

fun(x: Int, y: Int):Int = x+y 와 같이 사용
이후 변수 선언에 그대로 익명 함수를 사용할 수 있음
val add:(Int,Int) -> Int = fun(x,y) = x + y
val result = add(10,2) 와 같이 사용함
위의 add선언은 아래
val add = fun(x:Int, y:Int) = x + y
val add = { x: Int, y: Int -> x + y } 와 동일함(람다식과 동일하게 표현 가능)
*람다식과의 차이점 - 제어문을 사용할 수 있음(return 등)


인라인 함수
함수가 호출되는 곳에 컴파일러가 함수 본문의 내용을 모두 넣어, 분기하는 횟수를 줄여 성능을 높여주는 함수
inline fun sub(...){
  ~~
} 와 같이 함수 이름 앞에 inline을 붙여 구현
인라인 함수에 람다식이 너무 많아 비효율이 예상되는 경우, 람다식 변수이름 앞에 noinline 키워드를 붙여서 인라인을 막을 수 있음
inline fun sub(out1: ()->Unit , noline()->unit) { ... 와 같이 사용함

인라인 함수에서 사용한 람다식에서는 return을 사용할 수 있음
crossinline 키워드를 통해 비지역 반환(return을 통해 인라인 함수 안의 람다식을 종료하는 것)을 방지할 수 있음.
문맥이 달라져(함수의 중복호출) 인라인이 되지 않는 중첩된 람다식 함수에 사용



확장 함수
기존 클래스의 멤버 메소드는 아니지만, 기존의 클래스에 내가 원하는 함수를 하나 더 포함시켜 확장사용을 하고 싶을 때 이용하는 개념
fun 확장 대상.함수 이름(매개변수, ...): 반환값 {
  ...
  return 값
} 의 형태로 사용함


중위 함수
클래스의 멤버를 호출할 때 사용하는 점을 생략하고, 함수 이름 뒤에 소괄호를 붙이지 않아 직관적인 이름을 사용할 수 있는 표현법
중위 함수의 조건
-멤버 메소드 또는 확장 함수여야 함
-하나의 매개변수를 가져야 함
-infix 키워드를 사용하여 정의함

fun main(){
  val multi = 3 multiply 10
  //일반 표현법 : val multi = 3.multiply(10) << 일반 표현법보다 훨씬 직관적임
}
infix fun Int.multiply(x: Int): Int = this*x
처럼 사용할 수 있음


꼬리 재귀 함수
재귀함수의 스택오버플로우 현상을 해결하기 위해, 꼬리 재귀 함수를 제공. tailrec 키워드 사용
예시
fun main() {
  val number = 5
  println("Factorial: $number -> ${factorial(number)}")
}
tailrec fun factorial(n: Int, run: Int = 1):Long {
  return if(n==1) run.toLong() else factorial(n-1,run*n)
}
위와 같이 인자 안에서 먼저 계산을 할 수 있도록 재귀식을 호출하여야 함
