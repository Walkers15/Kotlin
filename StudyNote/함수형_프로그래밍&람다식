함수형 프로그래밍의 정의와 특징
  - 순수 함수를 사용해야 한다
  - 람다식을 사용할 수 있다
  - 고차 함수를 사용할 수 있다

고차 함수 - 다른 함수를 인자로 사용하거나 함수를 결과값으로 반환하는 함수

람다식 - 일급 객체의 특징을 가진 이름이 없는 "함수"

람다식이 할당된 변수(val multi[생략가능(Int,Int) -> Int] = {x: Int, y: Int -> x*y} 등)은 함수처럼 사용할 수 있음!
val multi: (Int, Int) -> Int = {x: Int, y: Int -> x*y}
val multi = {x:Int, y:Int -> x*y}
val multi: (Int, Int) -> Int = {x,y -> x*y} >> 셋 다 똑같은 의미임! 다 생략하면 추론이 불가능하므로 오류

반환 자료형이 없고, 매개변수가 없는 경우
val greet: () -> Unit = {println{"Hello World!")} 매개변수를 표현할 필요가 없으므로, 화살표 양쪽과 화살표 자체를 생략하여 표현
val greet = {println("Hello World!")} 로 생략하여 표현 가능

